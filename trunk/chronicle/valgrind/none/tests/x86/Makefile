# Makefile.in generated by automake 1.9.6 from Makefile.am.
# none/tests/x86/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/valgrind
pkglibdir = $(libdir)/valgrind
pkgincludedir = $(includedir)/valgrind
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-suse-linux
host_triplet = i686-suse-linux
check_PROGRAMS = badseg$(EXEEXT) bt_everything$(EXEEXT) \
	bt_literal$(EXEEXT) cmpxchg8b$(EXEEXT) cpuid$(EXEEXT) \
	faultstatus$(EXEEXT) fcmovnu$(EXEEXT) fpu_lazy_eflags$(EXEEXT) \
	fxtract$(EXEEXT) getseg$(EXEEXT) incdec_alt$(EXEEXT) \
	$(am__EXEEXT_1) lahf$(EXEEXT) looper$(EXEEXT) movx$(EXEEXT) \
	int$(EXEEXT) pushpopseg$(EXEEXT) sbbmisc$(EXEEXT) \
	seg_override$(EXEEXT) sigcontext$(EXEEXT) smc1$(EXEEXT) \
	yield$(EXEEXT)
subdir = none/tests/x86
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__EXEEXT_1 = insn_basic$(EXEEXT) insn_fpu$(EXEEXT) \
	insn_cmov$(EXEEXT) insn_mmx$(EXEEXT) insn_mmxext$(EXEEXT) \
	insn_sse$(EXEEXT) insn_sse2$(EXEEXT)
badseg_SOURCES = badseg.c
badseg_OBJECTS = badseg.$(OBJEXT)
badseg_LDADD = $(LDADD)
bt_everything_SOURCES = bt_everything.c
bt_everything_OBJECTS = bt_everything.$(OBJEXT)
bt_everything_LDADD = $(LDADD)
bt_literal_SOURCES = bt_literal.c
bt_literal_OBJECTS = bt_literal.$(OBJEXT)
bt_literal_LDADD = $(LDADD)
cmpxchg8b_SOURCES = cmpxchg8b.c
cmpxchg8b_OBJECTS = cmpxchg8b.$(OBJEXT)
cmpxchg8b_LDADD = $(LDADD)
am_cpuid_OBJECTS = cpuid_c.$(OBJEXT) cpuid_s.$(OBJEXT)
cpuid_OBJECTS = $(am_cpuid_OBJECTS)
cpuid_LDADD = $(LDADD)
faultstatus_SOURCES = faultstatus.c
faultstatus_OBJECTS = faultstatus.$(OBJEXT)
faultstatus_LDADD = $(LDADD)
fcmovnu_SOURCES = fcmovnu.c
fcmovnu_OBJECTS = fcmovnu.$(OBJEXT)
fcmovnu_LDADD = $(LDADD)
fpu_lazy_eflags_SOURCES = fpu_lazy_eflags.c
fpu_lazy_eflags_OBJECTS = fpu_lazy_eflags-fpu_lazy_eflags.$(OBJEXT)
fpu_lazy_eflags_LDADD = $(LDADD)
fxtract_SOURCES = fxtract.c
fxtract_OBJECTS = fxtract.$(OBJEXT)
fxtract_DEPENDENCIES =
getseg_SOURCES = getseg.c
getseg_OBJECTS = getseg.$(OBJEXT)
getseg_LDADD = $(LDADD)
incdec_alt_SOURCES = incdec_alt.c
incdec_alt_OBJECTS = incdec_alt.$(OBJEXT)
incdec_alt_LDADD = $(LDADD)
am_insn_basic_OBJECTS = insn_basic.$(OBJEXT)
insn_basic_OBJECTS = $(am_insn_basic_OBJECTS)
insn_basic_DEPENDENCIES =
am_insn_cmov_OBJECTS = insn_cmov.$(OBJEXT)
insn_cmov_OBJECTS = $(am_insn_cmov_OBJECTS)
insn_cmov_DEPENDENCIES =
am_insn_fpu_OBJECTS = insn_fpu.$(OBJEXT)
insn_fpu_OBJECTS = $(am_insn_fpu_OBJECTS)
insn_fpu_DEPENDENCIES =
am_insn_mmx_OBJECTS = insn_mmx.$(OBJEXT)
insn_mmx_OBJECTS = $(am_insn_mmx_OBJECTS)
insn_mmx_DEPENDENCIES =
am_insn_mmxext_OBJECTS = insn_mmxext.$(OBJEXT)
insn_mmxext_OBJECTS = $(am_insn_mmxext_OBJECTS)
insn_mmxext_DEPENDENCIES =
am_insn_sse_OBJECTS = insn_sse.$(OBJEXT)
insn_sse_OBJECTS = $(am_insn_sse_OBJECTS)
insn_sse_DEPENDENCIES =
am_insn_sse2_OBJECTS = insn_sse2.$(OBJEXT)
insn_sse2_OBJECTS = $(am_insn_sse2_OBJECTS)
insn_sse2_DEPENDENCIES =
int_SOURCES = int.c
int_OBJECTS = int.$(OBJEXT)
int_LDADD = $(LDADD)
lahf_SOURCES = lahf.c
lahf_OBJECTS = lahf.$(OBJEXT)
lahf_LDADD = $(LDADD)
looper_SOURCES = looper.c
looper_OBJECTS = looper.$(OBJEXT)
looper_LDADD = $(LDADD)
movx_SOURCES = movx.c
movx_OBJECTS = movx.$(OBJEXT)
movx_LDADD = $(LDADD)
pushpopseg_SOURCES = pushpopseg.c
pushpopseg_OBJECTS = pushpopseg.$(OBJEXT)
pushpopseg_LDADD = $(LDADD)
sbbmisc_SOURCES = sbbmisc.c
sbbmisc_OBJECTS = sbbmisc.$(OBJEXT)
sbbmisc_LDADD = $(LDADD)
seg_override_SOURCES = seg_override.c
seg_override_OBJECTS = seg_override.$(OBJEXT)
seg_override_LDADD = $(LDADD)
sigcontext_SOURCES = sigcontext.c
sigcontext_OBJECTS = sigcontext.$(OBJEXT)
sigcontext_LDADD = $(LDADD)
smc1_SOURCES = smc1.c
smc1_OBJECTS = smc1.$(OBJEXT)
smc1_LDADD = $(LDADD)
yield_SOURCES = yield.c
yield_OBJECTS = yield-yield.$(OBJEXT)
yield_DEPENDENCIES =
SCRIPTS = $(noinst_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)
SOURCES = badseg.c bt_everything.c bt_literal.c cmpxchg8b.c \
	$(cpuid_SOURCES) faultstatus.c fcmovnu.c fpu_lazy_eflags.c \
	fxtract.c getseg.c incdec_alt.c $(insn_basic_SOURCES) \
	$(insn_cmov_SOURCES) $(insn_fpu_SOURCES) $(insn_mmx_SOURCES) \
	$(insn_mmxext_SOURCES) $(insn_sse_SOURCES) \
	$(insn_sse2_SOURCES) int.c lahf.c looper.c movx.c pushpopseg.c \
	sbbmisc.c seg_override.c sigcontext.c smc1.c yield.c
DIST_SOURCES = badseg.c bt_everything.c bt_literal.c cmpxchg8b.c \
	$(cpuid_SOURCES) faultstatus.c fcmovnu.c fpu_lazy_eflags.c \
	fxtract.c getseg.c incdec_alt.c $(insn_basic_SOURCES) \
	$(insn_cmov_SOURCES) $(insn_fpu_SOURCES) $(insn_mmx_SOURCES) \
	$(insn_mmxext_SOURCES) $(insn_sse_SOURCES) \
	$(insn_sse2_SOURCES) int.c lahf.c looper.c movx.c pushpopseg.c \
	sbbmisc.c seg_override.c sigcontext.c smc1.c yield.c
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/roc/shared/chronicle/valgrind/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/roc/shared/chronicle/valgrind/missing --run tar
AUTOCONF = ${SHELL} /home/roc/shared/chronicle/valgrind/missing --run autoconf
AUTOHEADER = ${SHELL} /home/roc/shared/chronicle/valgrind/missing --run autoheader
AUTOMAKE = ${SHELL} /home/roc/shared/chronicle/valgrind/missing --run automake-1.9
AWK = gawk
BUILD_MPIWRAP_FALSE = 
BUILD_MPIWRAP_TRUE = #
CC = gcc
CCAS = gcc
CCASFLAGS = -Wno-long-long
CCDEPMODE = depmode=gcc3
CFLAGS = -Wno-long-long -Wno-pointer-sign -Wdeclaration-after-statement
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFAULT_SUPP = xfree-3.supp xfree-4.supp glibc-2.5.supp 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISTCHECK_CONFIGURE_FLAGS = --with-vex=$(top_srcdir)/VEX
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FLAG_M32 = -m32
FLAG_M64 = 
FLAG_MMMX = -mmmx
FLAG_MSSE = -msse
FLAG_WDECL_AFTER_STMT = -Wdeclaration-after-statement
GDB = /usr/bin/gdb
GREP = /usr/bin/grep
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /home/roc/shared/chronicle/valgrind/missing --run makeinfo
MPI_CC = mpicc
OBJEXT = o
PACKAGE = valgrind
PACKAGE_BUGREPORT = valgrind-users@lists.sourceforge.net
PACKAGE_NAME = Valgrind
PACKAGE_STRING = Valgrind 3.2.3
PACKAGE_TARNAME = valgrind
PACKAGE_VERSION = 3.2.3
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PREFERRED_STACK_BOUNDARY = -mpreferred-stack-boundary=2
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VALT_LOAD_ADDRESS = 0x38000000
VERSION = 3.2.3
VEX_DIR = $(top_srcdir)/VEX
VG_AMD64_LINUX_FALSE = 
VG_AMD64_LINUX_TRUE = #
VG_ARCH = x86
VG_ARCH_ALL = amd64 ppc32 ppc64 x86
VG_OS = linux
VG_PLATFORM_PRI = X86_LINUX
VG_PLATFORM_SEC = 
VG_PPC32_LINUX_FALSE = 
VG_PPC32_LINUX_TRUE = #
VG_PPC64_LINUX_FALSE = 
VG_PPC64_LINUX_TRUE = #
VG_X86_LINUX_FALSE = #
VG_X86_LINUX_TRUE = 
XMKMF = 
ac_ct_CC = gcc
ac_ct_CXX = g++
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-suse-linux
build_alias = 
build_cpu = i686
build_os = linux
build_vendor = suse
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-suse-linux
host_alias = 
host_cpu = i686
host_os = linux
host_vendor = suse
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/roc/shared/chronicle/valgrind/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
noinst_SCRIPTS = filter_cpuid filter_stderr gen_insn_test.pl
CLEANFILES = $(addsuffix .c,$(INSN_TESTS))
INSN_TESTS = insn_basic insn_fpu insn_cmov insn_mmx insn_mmxext insn_sse insn_sse2
EXTRA_DIST = $(noinst_SCRIPTS) \
	badseg.stderr.exp badseg.stdout.exp badseg.vgtest \
	bt_everything.stderr.exp bt_everything.stdout.exp bt_everything.vgtest \
	bt_literal.stderr.exp bt_literal.stdout.exp bt_literal.vgtest \
	cpuid.stderr.exp cpuid.stdout.exp cpuid.vgtest \
	cmpxchg8b.stderr.exp cmpxchg8b.stdout.exp cmpxchg8b.vgtest \
	faultstatus.disabled faultstatus.stderr.exp \
	fcmovnu.vgtest fcmovnu.stderr.exp fcmovnu.stdout.exp \
	fpu_lazy_eflags.stderr.exp fpu_lazy_eflags.stdout.exp \
	fpu_lazy_eflags.vgtest \
	fxtract.stdout.exp fxtract.stderr.exp fxtract.vgtest \
	getseg.stdout.exp getseg.stderr.exp getseg.vgtest \
	incdec_alt.stdout.exp incdec_alt.stderr.exp incdec_alt.vgtest \
	int.stderr.exp int.stdout.exp int.disabled \
	$(addsuffix .stderr.exp,$(INSN_TESTS)) \
	$(addsuffix .stdout.exp,$(INSN_TESTS)) \
	$(addsuffix .vgtest,$(INSN_TESTS)) \
	lahf.stdout.exp lahf.stderr.exp lahf.vgtest \
	looper.stderr.exp looper.stdout.exp looper.vgtest \
	movx.stderr.exp movx.stdout.exp movx.vgtest \
	pushpopseg.stderr.exp pushpopseg.stdout.exp pushpopseg.vgtest \
	sbbmisc.stderr.exp sbbmisc.stdout.exp sbbmisc.vgtest \
	seg_override.stderr.exp seg_override.stdout.exp seg_override.vgtest \
	sigcontext.stdout.exp sigcontext.stderr.exp sigcontext.vgtest \
	smc1.stderr.exp smc1.stdout.exp smc1.vgtest \
	yield.stderr.exp yield.stdout.exp yield.disabled

AM_CFLAGS = $(WERROR) -Winline -Wall -Wshadow \
		-m32 -g -I$(top_srcdir)/include \
		$(FLAG_MMMX) $(FLAG_MSSE)

AM_CXXFLAGS = $(AM_CFLAGS)
AM_CCASFLAGS = -m32

# generic C ones
cpuid_SOURCES = cpuid_c.c cpuid_s.s
# fpu_lazy_eflags must use these flags -- the bug only occurred with them
fpu_lazy_eflags_CFLAGS = -m32 -O2 -march=pentiumpro
fxtract_LDADD = -lm
insn_basic_SOURCES = insn_basic.def
insn_basic_LDADD = -lm
insn_fpu_SOURCES = insn_fpu.def
insn_fpu_LDADD = -lm
insn_cmov_SOURCES = insn_cmov.def
insn_cmov_LDADD = -lm
insn_mmx_SOURCES = insn_mmx.def
insn_mmx_LDADD = -lm
insn_mmxext_SOURCES = insn_mmxext.def
insn_mmxext_LDADD = -lm
insn_sse_SOURCES = insn_sse.def
insn_sse_LDADD = -lm
insn_sse2_SOURCES = insn_sse2.def
insn_sse2_LDADD = -lm
yield_CFLAGS = $(AM_CFLAGS) -D__$(VG_ARCH)__
yield_LDADD = -lpthread
all: all-am

.SUFFIXES:
.SUFFIXES: .c .def .o .obj .s
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  none/tests/x86/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  none/tests/x86/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
badseg$(EXEEXT): $(badseg_OBJECTS) $(badseg_DEPENDENCIES) 
	@rm -f badseg$(EXEEXT)
	$(LINK) $(badseg_LDFLAGS) $(badseg_OBJECTS) $(badseg_LDADD) $(LIBS)
bt_everything$(EXEEXT): $(bt_everything_OBJECTS) $(bt_everything_DEPENDENCIES) 
	@rm -f bt_everything$(EXEEXT)
	$(LINK) $(bt_everything_LDFLAGS) $(bt_everything_OBJECTS) $(bt_everything_LDADD) $(LIBS)
bt_literal$(EXEEXT): $(bt_literal_OBJECTS) $(bt_literal_DEPENDENCIES) 
	@rm -f bt_literal$(EXEEXT)
	$(LINK) $(bt_literal_LDFLAGS) $(bt_literal_OBJECTS) $(bt_literal_LDADD) $(LIBS)
cmpxchg8b$(EXEEXT): $(cmpxchg8b_OBJECTS) $(cmpxchg8b_DEPENDENCIES) 
	@rm -f cmpxchg8b$(EXEEXT)
	$(LINK) $(cmpxchg8b_LDFLAGS) $(cmpxchg8b_OBJECTS) $(cmpxchg8b_LDADD) $(LIBS)
cpuid$(EXEEXT): $(cpuid_OBJECTS) $(cpuid_DEPENDENCIES) 
	@rm -f cpuid$(EXEEXT)
	$(LINK) $(cpuid_LDFLAGS) $(cpuid_OBJECTS) $(cpuid_LDADD) $(LIBS)
faultstatus$(EXEEXT): $(faultstatus_OBJECTS) $(faultstatus_DEPENDENCIES) 
	@rm -f faultstatus$(EXEEXT)
	$(LINK) $(faultstatus_LDFLAGS) $(faultstatus_OBJECTS) $(faultstatus_LDADD) $(LIBS)
fcmovnu$(EXEEXT): $(fcmovnu_OBJECTS) $(fcmovnu_DEPENDENCIES) 
	@rm -f fcmovnu$(EXEEXT)
	$(LINK) $(fcmovnu_LDFLAGS) $(fcmovnu_OBJECTS) $(fcmovnu_LDADD) $(LIBS)
fpu_lazy_eflags$(EXEEXT): $(fpu_lazy_eflags_OBJECTS) $(fpu_lazy_eflags_DEPENDENCIES) 
	@rm -f fpu_lazy_eflags$(EXEEXT)
	$(LINK) $(fpu_lazy_eflags_LDFLAGS) $(fpu_lazy_eflags_OBJECTS) $(fpu_lazy_eflags_LDADD) $(LIBS)
fxtract$(EXEEXT): $(fxtract_OBJECTS) $(fxtract_DEPENDENCIES) 
	@rm -f fxtract$(EXEEXT)
	$(LINK) $(fxtract_LDFLAGS) $(fxtract_OBJECTS) $(fxtract_LDADD) $(LIBS)
getseg$(EXEEXT): $(getseg_OBJECTS) $(getseg_DEPENDENCIES) 
	@rm -f getseg$(EXEEXT)
	$(LINK) $(getseg_LDFLAGS) $(getseg_OBJECTS) $(getseg_LDADD) $(LIBS)
incdec_alt$(EXEEXT): $(incdec_alt_OBJECTS) $(incdec_alt_DEPENDENCIES) 
	@rm -f incdec_alt$(EXEEXT)
	$(LINK) $(incdec_alt_LDFLAGS) $(incdec_alt_OBJECTS) $(incdec_alt_LDADD) $(LIBS)
insn_basic$(EXEEXT): $(insn_basic_OBJECTS) $(insn_basic_DEPENDENCIES) 
	@rm -f insn_basic$(EXEEXT)
	$(LINK) $(insn_basic_LDFLAGS) $(insn_basic_OBJECTS) $(insn_basic_LDADD) $(LIBS)
insn_cmov$(EXEEXT): $(insn_cmov_OBJECTS) $(insn_cmov_DEPENDENCIES) 
	@rm -f insn_cmov$(EXEEXT)
	$(LINK) $(insn_cmov_LDFLAGS) $(insn_cmov_OBJECTS) $(insn_cmov_LDADD) $(LIBS)
insn_fpu$(EXEEXT): $(insn_fpu_OBJECTS) $(insn_fpu_DEPENDENCIES) 
	@rm -f insn_fpu$(EXEEXT)
	$(LINK) $(insn_fpu_LDFLAGS) $(insn_fpu_OBJECTS) $(insn_fpu_LDADD) $(LIBS)
insn_mmx$(EXEEXT): $(insn_mmx_OBJECTS) $(insn_mmx_DEPENDENCIES) 
	@rm -f insn_mmx$(EXEEXT)
	$(LINK) $(insn_mmx_LDFLAGS) $(insn_mmx_OBJECTS) $(insn_mmx_LDADD) $(LIBS)
insn_mmxext$(EXEEXT): $(insn_mmxext_OBJECTS) $(insn_mmxext_DEPENDENCIES) 
	@rm -f insn_mmxext$(EXEEXT)
	$(LINK) $(insn_mmxext_LDFLAGS) $(insn_mmxext_OBJECTS) $(insn_mmxext_LDADD) $(LIBS)
insn_sse$(EXEEXT): $(insn_sse_OBJECTS) $(insn_sse_DEPENDENCIES) 
	@rm -f insn_sse$(EXEEXT)
	$(LINK) $(insn_sse_LDFLAGS) $(insn_sse_OBJECTS) $(insn_sse_LDADD) $(LIBS)
insn_sse2$(EXEEXT): $(insn_sse2_OBJECTS) $(insn_sse2_DEPENDENCIES) 
	@rm -f insn_sse2$(EXEEXT)
	$(LINK) $(insn_sse2_LDFLAGS) $(insn_sse2_OBJECTS) $(insn_sse2_LDADD) $(LIBS)
int$(EXEEXT): $(int_OBJECTS) $(int_DEPENDENCIES) 
	@rm -f int$(EXEEXT)
	$(LINK) $(int_LDFLAGS) $(int_OBJECTS) $(int_LDADD) $(LIBS)
lahf$(EXEEXT): $(lahf_OBJECTS) $(lahf_DEPENDENCIES) 
	@rm -f lahf$(EXEEXT)
	$(LINK) $(lahf_LDFLAGS) $(lahf_OBJECTS) $(lahf_LDADD) $(LIBS)
looper$(EXEEXT): $(looper_OBJECTS) $(looper_DEPENDENCIES) 
	@rm -f looper$(EXEEXT)
	$(LINK) $(looper_LDFLAGS) $(looper_OBJECTS) $(looper_LDADD) $(LIBS)
movx$(EXEEXT): $(movx_OBJECTS) $(movx_DEPENDENCIES) 
	@rm -f movx$(EXEEXT)
	$(LINK) $(movx_LDFLAGS) $(movx_OBJECTS) $(movx_LDADD) $(LIBS)
pushpopseg$(EXEEXT): $(pushpopseg_OBJECTS) $(pushpopseg_DEPENDENCIES) 
	@rm -f pushpopseg$(EXEEXT)
	$(LINK) $(pushpopseg_LDFLAGS) $(pushpopseg_OBJECTS) $(pushpopseg_LDADD) $(LIBS)
sbbmisc$(EXEEXT): $(sbbmisc_OBJECTS) $(sbbmisc_DEPENDENCIES) 
	@rm -f sbbmisc$(EXEEXT)
	$(LINK) $(sbbmisc_LDFLAGS) $(sbbmisc_OBJECTS) $(sbbmisc_LDADD) $(LIBS)
seg_override$(EXEEXT): $(seg_override_OBJECTS) $(seg_override_DEPENDENCIES) 
	@rm -f seg_override$(EXEEXT)
	$(LINK) $(seg_override_LDFLAGS) $(seg_override_OBJECTS) $(seg_override_LDADD) $(LIBS)
sigcontext$(EXEEXT): $(sigcontext_OBJECTS) $(sigcontext_DEPENDENCIES) 
	@rm -f sigcontext$(EXEEXT)
	$(LINK) $(sigcontext_LDFLAGS) $(sigcontext_OBJECTS) $(sigcontext_LDADD) $(LIBS)
smc1$(EXEEXT): $(smc1_OBJECTS) $(smc1_DEPENDENCIES) 
	@rm -f smc1$(EXEEXT)
	$(LINK) $(smc1_LDFLAGS) $(smc1_OBJECTS) $(smc1_LDADD) $(LIBS)
yield$(EXEEXT): $(yield_OBJECTS) $(yield_DEPENDENCIES) 
	@rm -f yield$(EXEEXT)
	$(LINK) $(yield_LDFLAGS) $(yield_OBJECTS) $(yield_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/badseg.Po
include ./$(DEPDIR)/bt_everything.Po
include ./$(DEPDIR)/bt_literal.Po
include ./$(DEPDIR)/cmpxchg8b.Po
include ./$(DEPDIR)/cpuid_c.Po
include ./$(DEPDIR)/faultstatus.Po
include ./$(DEPDIR)/fcmovnu.Po
include ./$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Po
include ./$(DEPDIR)/fxtract.Po
include ./$(DEPDIR)/getseg.Po
include ./$(DEPDIR)/incdec_alt.Po
include ./$(DEPDIR)/insn_basic.Po
include ./$(DEPDIR)/insn_cmov.Po
include ./$(DEPDIR)/insn_fpu.Po
include ./$(DEPDIR)/insn_mmx.Po
include ./$(DEPDIR)/insn_mmxext.Po
include ./$(DEPDIR)/insn_sse.Po
include ./$(DEPDIR)/insn_sse2.Po
include ./$(DEPDIR)/int.Po
include ./$(DEPDIR)/lahf.Po
include ./$(DEPDIR)/looper.Po
include ./$(DEPDIR)/movx.Po
include ./$(DEPDIR)/pushpopseg.Po
include ./$(DEPDIR)/sbbmisc.Po
include ./$(DEPDIR)/seg_override.Po
include ./$(DEPDIR)/sigcontext.Po
include ./$(DEPDIR)/smc1.Po
include ./$(DEPDIR)/yield-yield.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

fpu_lazy_eflags-fpu_lazy_eflags.o: fpu_lazy_eflags.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(fpu_lazy_eflags_CFLAGS) $(CFLAGS) -MT fpu_lazy_eflags-fpu_lazy_eflags.o -MD -MP -MF "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Tpo" -c -o fpu_lazy_eflags-fpu_lazy_eflags.o `test -f 'fpu_lazy_eflags.c' || echo '$(srcdir)/'`fpu_lazy_eflags.c; \
	then mv -f "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Tpo" "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Po"; else rm -f "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Tpo"; exit 1; fi
#	source='fpu_lazy_eflags.c' object='fpu_lazy_eflags-fpu_lazy_eflags.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(fpu_lazy_eflags_CFLAGS) $(CFLAGS) -c -o fpu_lazy_eflags-fpu_lazy_eflags.o `test -f 'fpu_lazy_eflags.c' || echo '$(srcdir)/'`fpu_lazy_eflags.c

fpu_lazy_eflags-fpu_lazy_eflags.obj: fpu_lazy_eflags.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(fpu_lazy_eflags_CFLAGS) $(CFLAGS) -MT fpu_lazy_eflags-fpu_lazy_eflags.obj -MD -MP -MF "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Tpo" -c -o fpu_lazy_eflags-fpu_lazy_eflags.obj `if test -f 'fpu_lazy_eflags.c'; then $(CYGPATH_W) 'fpu_lazy_eflags.c'; else $(CYGPATH_W) '$(srcdir)/fpu_lazy_eflags.c'; fi`; \
	then mv -f "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Tpo" "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Po"; else rm -f "$(DEPDIR)/fpu_lazy_eflags-fpu_lazy_eflags.Tpo"; exit 1; fi
#	source='fpu_lazy_eflags.c' object='fpu_lazy_eflags-fpu_lazy_eflags.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(fpu_lazy_eflags_CFLAGS) $(CFLAGS) -c -o fpu_lazy_eflags-fpu_lazy_eflags.obj `if test -f 'fpu_lazy_eflags.c'; then $(CYGPATH_W) 'fpu_lazy_eflags.c'; else $(CYGPATH_W) '$(srcdir)/fpu_lazy_eflags.c'; fi`

yield-yield.o: yield.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(yield_CFLAGS) $(CFLAGS) -MT yield-yield.o -MD -MP -MF "$(DEPDIR)/yield-yield.Tpo" -c -o yield-yield.o `test -f 'yield.c' || echo '$(srcdir)/'`yield.c; \
	then mv -f "$(DEPDIR)/yield-yield.Tpo" "$(DEPDIR)/yield-yield.Po"; else rm -f "$(DEPDIR)/yield-yield.Tpo"; exit 1; fi
#	source='yield.c' object='yield-yield.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(yield_CFLAGS) $(CFLAGS) -c -o yield-yield.o `test -f 'yield.c' || echo '$(srcdir)/'`yield.c

yield-yield.obj: yield.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(yield_CFLAGS) $(CFLAGS) -MT yield-yield.obj -MD -MP -MF "$(DEPDIR)/yield-yield.Tpo" -c -o yield-yield.obj `if test -f 'yield.c'; then $(CYGPATH_W) 'yield.c'; else $(CYGPATH_W) '$(srcdir)/yield.c'; fi`; \
	then mv -f "$(DEPDIR)/yield-yield.Tpo" "$(DEPDIR)/yield-yield.Po"; else rm -f "$(DEPDIR)/yield-yield.Tpo"; exit 1; fi
#	source='yield.c' object='yield-yield.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(yield_CFLAGS) $(CFLAGS) -c -o yield-yield.obj `if test -f 'yield.c'; then $(CYGPATH_W) 'yield.c'; else $(CYGPATH_W) '$(srcdir)/yield.c'; fi`

.s.o:
	$(CCASCOMPILE) -c $<

.s.obj:
	$(CCASCOMPILE) -c `$(CYGPATH_W) '$<'`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-am
all-am: Makefile $(SCRIPTS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean \
	clean-checkPROGRAMS clean-generic ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am


.def.c: $(srcdir)/gen_insn_test.pl
	$(PERL) $(srcdir)/gen_insn_test.pl < $< > $@
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
